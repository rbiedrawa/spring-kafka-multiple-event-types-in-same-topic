spring:
  application:
    name: kstream-avro
  kafka:
    bootstrap-servers: "localhost:9092"
    properties:
#      allow.auto.create.topics: false
      auto.register.schemas: false  # disables automatic registration of the event type, so that it does not override the union as the latest schema in the subject
      use.latest.version: true # causes the Avro serializer to look up the latest schema version in the subject (which will be the union) and use that for serialization; otherwise, if set to false, the serializer will look for the event type in the subject and fail to find it
      schema:
        registry:
          url: "http://localhost:8081"

  cloud:
    stream:
      default:
        producer:
          useNativeEncoding: true
        consumer:
          useNativeDecoding: true
      function:
        definition: >-
          transactionAggregateFunction;
      bindings:
        transaction_events_output:
          destination: transaction.events
          content-type: application/*+avro

        transactionAggregateFunction-in-0:
          destination: transaction.events
      kafka:
        binder:
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.StringSerializer
            value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
        streams:
          binder:
            configuration:
              default:
                key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              processing.guarantee: exactly_once_beta
              commit.interval.ms: 100
              specific.avro.reader: true
            functions:
              transactionAggregateFunction:
                configuration:
                  application.id: "transactions-kstream"
                  commit.interval.ms: 50 # overwriting default properties, useful when we have multiple KStreams inside same Spring Boot application.